* * * * * * * *
*   main.c    *
* * * * * * * *

DESCRIPTION:
    The main.c program simulates multi-threaded processes allocation, execution, and termination using 100 pthreads. A thread id is allocated for each pthread and a mutex is initialized so it is available to block pthreads when a race condition might occur. A pid_map is allocated to track the allocation state of each pid. Next, each pthread is created and runs the simulate_process_runnable() function, which simulates a process running on that thread. After creation of all pthreads, main() waits for each pthread to finish and finally deallocates the pid_map and destroys the mutex.

    If initialization of the mutex or allocation of the pid_map fails, main() will exit early with an error message describing the reason.


PREPROCESSOR CONSTANTS AND GLOBAL VARIABLES:
    NUM_THREADS represents the number of pthreads used to simulate multi-threaded processes execution.

    pthread_mutex_t lock is a pthread mutex used to block other pthreads because of race conditions that occur if multiple threads are interacting with the pid_map at the same time.


MAIN - FIELDS:
    pthread_t tid[] is an array of pthread ids, used in the creation of pthreads.

    int map_allocated is an integer used to hold the return value of allocate_map(), which represents the success or failure of the allocation of a pid_map.

FUNCTIONS:
    void *simulate_process_runnable()
        This function is used to simulate a process running. The function uses a mutex to block other threads and allocates a pid for the simulated process. The other threads are unblocked and the simulate process sleeps for a random amount of time between 0 and 5 seconds to simulate the execution of process. When the simulated execution is complete, the other threads are once again blocked and the pid is released, and finally the pthread is exited with code 0.
        Returns no value.
        Accepts no parameters.


* * * * * * * * * * * * * * * * * * * * *
*   pid_manager.c and pid_manager.h1    *
* * * * * * * * * * * * * * * * * * * * *

DESCRIPTION:
    The pid_manager program provides an interface to allocate a bitmap that represents the availability of pids, and assign and release pids within an allowable range of values. Some pids will remain reserved, and cannot be allocated by the pid_manager.

PREPROCESSOR CONSTANTS:
MIN_PID represents the lowest value pid that can be assigned by the pid_manager
MAX_PID represents the highest value pid than can be assigned by the pid_manager

FIELDS:
unsigned char *pid_map - This pointer is used to store the location of a bitmap allocated in the allocate_map() function.

size_t words_in_map - This variable holds the number of words in the bitmap allocated in the allocate_map() function.

const unsigned char fullWord - This constant stores an unsigned char with each bit having a value of 1. It is used in allocate_pid() to check if every pid represented by a word in the pid_map is already assigned, without having to check each bit individually.

FUNCTIONS:
int allocate_map(void)
    This function allocates and initializes a bitmap of unsigned char that can represent pid values from 0 to, and including, MAX_PID. Within the function, char *pid_map is assigned the location of the allocated bitmap, and size_t words_in_map is set to the number of words in the bitmap.
     Returns 1 if the bitmap was allocated successfully, or -1 if the allocation was unsuccessful.
     Accepts no parameters.

int allocate_pid(void)
    This function searches through the bitmap pointed to by pid_map and locates the first available pid in the range [MIN_PID, MAX_PID]. Values of 0 in the bitmap represent a free pid, and values of 1 represent a currently assigned pid. The search is conducted by comparing words in the bitmap to the constant fullWord to see if entire words in the bitmap are already assigned. If a word in the bitmap is not already entirely assigned, the bits in the word are checked sequentially until an available pid in the range [MIN_PID, MAX_PID] is found. The available pid will then be assigned in the bitmap and its value returned.
    Returns the assigned pid value as an int, or -1 if there are no available pids to allocate.
    Accepts no parameters.

void release_pid(int pid)
    This function sets a pid, passed in as a parameter, to 0 in the bitmap making it available for reallocation. Any pid outside the allowable range, [MIN_PID, MAX_PID] will be ignored.
    Returns no value.
    Accepts one parameter, int pid, which is the pid value to be released.

void deallocate_map(void)
    This function deallocates the bitmap pointed to by pid_map and sets the pid_map pointer to NULL.
    Returns no value.
    Accepts no parameters.

